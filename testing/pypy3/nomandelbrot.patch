--- rpython/tool/ansi_mandelbrot.py
+++ rpython/tool/ansi_mandelbrot.py
@@ -99,13 +99,14 @@
         (-1.15, -0.28, 0.3, 58),
         (-1.15, -0.28, 0.05, 26),
             ]
-    def __init__(self, **kwargs):
+    def __init__(self,quiet=False, **kwargs):
         self.kwargs = kwargs
         self.zoom_location = -1
         self.max_colour = 256
         self.colour_range = None
         self.invert = True
         self.interesting_coordinates = []
+        self.quiet=quiet
         self.init()
 
     def init(self):
@@ -125,34 +126,35 @@
 
     def dot(self):
         """ Emits a colourful character. """
-        x = c = 0
-        try:
-            x, y, c = self.gen.next()
-            if x == 0:
-                width = get_terminal_width()
-                if width != self.width:
-                    self.init()
-        except StopIteration:
-            if DEBUG and self.interesting_coordinates:
-                print >>sys.stderr, "Interesting coordinates:", self.interesting_coordinates
-                self.interesting_coordinates = []
-            kwargs = self.kwargs
-            self.zoom_location += 1
-            self.zoom_location %= len(self.zoom_locations)
-            loc = self.zoom_locations[self.zoom_location]
-            kwargs.update({"x_pos": loc[0], "y_pos": loc[1], "distance": loc[2]})
-            self.max_colour = loc[3]
-            if DEBUG:
-                # Only used for debugging new locations:
-                print "Colour range", self.colour_range
-            self.colour_range = None
-            self.restart()
-            return
-        if self.print_pixel(c, self.invert):
-            self.interesting_coordinates.append(dict(x=(x, self.mandelbrot.x_range[x]),
-                                                     y=(y, self.mandelbrot.y_range[y])))
-        if x == self.width - 1:
-            print >>sys.stderr
+        if not self.quiet:
+            x = c = 0
+            try:
+                x, y, c = self.gen.next()
+                if x == 0:
+                    width = get_terminal_width()
+                    if width != self.width:
+                        self.init()
+            except StopIteration:
+                if DEBUG and self.interesting_coordinates:
+                    print >>sys.stderr, "Interesting coordinates:", self.interesting_coordinates
+                    self.interesting_coordinates = []
+                kwargs = self.kwargs
+                self.zoom_location += 1
+                self.zoom_location %= len(self.zoom_locations)
+                loc = self.zoom_locations[self.zoom_location]
+                kwargs.update({"x_pos": loc[0], "y_pos": loc[1], "distance": loc[2]})
+                self.max_colour = loc[3]
+                if DEBUG:
+                    # Only used for debugging new locations:
+                    print "Colour range", self.colour_range
+                self.colour_range = None
+                self.restart()
+                return
+            if self.print_pixel(c, self.invert):
+                self.interesting_coordinates.append(dict(x=(x, self.mandelbrot.x_range[x]),
+                                                         y=(y, self.mandelbrot.y_range[y])))
+            if x == self.width - 1:
+                print >>sys.stderr
 
     def print_pixel(self, colour, invert=1):
         chars = [".", ".", "+", "*", "%", "#"]
--- rpython/tool/ansi_print.py
+++ rpython/tool/ansi_print.py
@@ -8,7 +8,7 @@
 
 
 isatty = getattr(sys.stderr, 'isatty', lambda: False)
-mandelbrot_driver = Driver()
+mandelbrot_driver = Driver(quiet=True)
 wrote_dot = False     # global shared state
 
 
